// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_vmul_execute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        size_dout,
        size_empty_n,
        size_read,
        size_num_data_valid,
        size_fifo_cap,
        inStream_A_dout,
        inStream_A_empty_n,
        inStream_A_read,
        inStream_A_num_data_valid,
        inStream_A_fifo_cap,
        inStream_B_dout,
        inStream_B_empty_n,
        inStream_B_read,
        inStream_B_num_data_valid,
        inStream_B_fifo_cap,
        outStream_din,
        outStream_full_n,
        outStream_write,
        outStream_num_data_valid,
        outStream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] size_dout;
input   size_empty_n;
output   size_read;
input  [2:0] size_num_data_valid;
input  [2:0] size_fifo_cap;
input  [31:0] inStream_A_dout;
input   inStream_A_empty_n;
output   inStream_A_read;
input  [2:0] inStream_A_num_data_valid;
input  [2:0] inStream_A_fifo_cap;
input  [31:0] inStream_B_dout;
input   inStream_B_empty_n;
output   inStream_B_read;
input  [2:0] inStream_B_num_data_valid;
input  [2:0] inStream_B_fifo_cap;
output  [31:0] outStream_din;
input   outStream_full_n;
output   outStream_write;
input  [2:0] outStream_num_data_valid;
input  [2:0] outStream_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg size_read;
reg outStream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_blk_n;
reg    outStream_blk_n;
wire    ap_CS_fsm_state4;
reg   [31:0] size_1_reg_99;
reg    ap_block_state1;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_done;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_idle;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_ready;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_A_read;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_B_read;
wire   [31:0] grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_outsum_out;
wire    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_outsum_out_ap_vld;
reg    grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg = 1'b0;
end

krnl_vmul_execute_Pipeline_VITIS_LOOP_28_1 grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start),
    .ap_done(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_done),
    .ap_idle(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_idle),
    .ap_ready(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_ready),
    .inStream_A_dout(inStream_A_dout),
    .inStream_A_empty_n(inStream_A_empty_n),
    .inStream_A_read(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_A_read),
    .inStream_A_num_data_valid(3'd0),
    .inStream_A_fifo_cap(3'd0),
    .inStream_B_dout(inStream_B_dout),
    .inStream_B_empty_n(inStream_B_empty_n),
    .inStream_B_read(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_B_read),
    .inStream_B_num_data_valid(3'd0),
    .inStream_B_fifo_cap(3'd0),
    .size_1(size_1_reg_99),
    .outsum_out(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_outsum_out),
    .outsum_out_ap_vld(grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_outsum_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((outStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg <= 1'b1;
        end else if ((grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_ready == 1'b1)) begin
            grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_1_reg_99 <= size_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((outStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((outStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outStream_blk_n = outStream_full_n;
    end else begin
        outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((outStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        outStream_write = 1'b1;
    end else begin
        outStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((outStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start = grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_ap_start_reg;

assign inStream_A_read = grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_A_read;

assign inStream_B_read = grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_inStream_B_read;

assign outStream_din = grp_execute_Pipeline_VITIS_LOOP_28_1_fu_55_outsum_out;

endmodule //krnl_vmul_execute
